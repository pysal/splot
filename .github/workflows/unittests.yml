name: Continuous Integration

on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - "*"
  schedule:
    - cron: "59 23 * * 1,4"

jobs:
  unittests:
    name: ${{ matrix.os }}, ${{ matrix.environment-file }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        environment-file: [ci/38.yaml, ci/39.yaml, ci/310.yaml]
        include:
          - environment-file: ci/39-DEV.yaml
            os: ubuntu-latest

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: setup micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: ${{ matrix.environment-file }}
          micromamba-version: "latest"

      - name: install bleeding edge PySAL submodules (only Ubuntu / Python 3.9)
        shell: bash -l {0}
        run: |
          pip install git+https://github.com/pysal/libpysal.git@master
          pip install git+https://github.com/pysal/mapclassify.git@master
          pip install git+https://github.com/pysal/esda.git@master
          pip install git+https://github.com/pysal/spreg.git@master
          pip install git+https://github.com/pysal/giddy.git@master
        if: matrix.os == 'ubuntu-latest' && contains(matrix.environment-file, 'DEV')

      - name: install libpysal example datasets
        shell: bash -l {0}
        run: python -c 'import libpysal; libpysal.examples.load_example("Guerry"); libpysal.examples.load_example("Rio Grande do Sul")'

      - name: install and import splot
        shell: bash -l {0}
        run: |
          python -m pip install --no-deps -e .
          python -c 'import splot'

      - name: copy matplotlibrc
        shell: bash -l {0}
        run: cp utils/matplotlibrc .

      - name: run tests - bash
        shell: bash -l {0}
        run: pytest -v splot --cov=splot --cov-config=.coveragerc --cov-report=xml #--doctest-modules
        if: matrix.os != 'windows-latest'

      - name: run tests - powershell
        shell: powershell
        run: pytest -v splot --cov=splot --cov-config=.coveragerc --cov-report=xml #--doctest-modules
        if: matrix.os == 'windows-latest'

      - name: codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          name: splot-codecov
